import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.ArrayList;

/**
 * This is a SUBSET of the unit tests with which we will grade your code.
 *
 * Make absolute sure that your code can compile together with this tester!
 * If it does not, you may get a very low grade for your assignment.
 */
public class FacebukPartialTester {
	private Person _barack, _michelle, _kevin, _ina, _joe, _malia, _matthew, _andrew, _winnie, _kingsley, _lewis, _meg;
	private Pet _bo, _sunny, _fido, _grey, _smokey, _xander;
	private Moment _meAndBarack;
	private ArrayList _michelleAndBarack, _michelleJoeBoAndMalia;

	@Before
	public void setUp() {
		initPeople();
		initPets();
		initGroups();
		initPossessions();
		initMoments();
	}

	private void initPeople () {
		_michelle = new Person("Michelle", new Image("Michelle.png"));
		_barack = new Person("Barack", new Image("Barack.png"));
		_kevin = new Person("Kevin", new Image("Kevin.png"));
		_ina = new Person("Ina", new Image("Ina.png"));
		_joe = new Person("Joe", new Image("Joe.png"));
		_malia = new Person("Malia", new Image("Malia.png"));
		//
		//Matthew and Winnie's Test Person Data!
		//
		_matthew = new Person("Matthew", new Image("Matthew.png"));
		_andrew = new Person("Andrew", new Image("Andrew.png"));
		_winnie = new Person("Winnie", new Image("Winnie.png"));
		_kingsley = new Person("Kingsley", new Image("Kingsley.png"));
		_lewis = new Person("Lewis", new Image("Lewis.png"));
		_meg = new Person("Meg", new Image("Meg.png"));
	}

	private void initPets () {
		_bo = new Pet("Bo", new Image("Bo.png"));
		_sunny = new Pet("Sunny", new Image("Sunny.png"));

		_bo.setOwner(_michelle);
		_sunny.setOwner(_michelle);
		
		//Matthew and Winnie's Test Pet Data!
		//
		_fido = new Pet("Fido", new Image("Fido.png"));
		_grey = new Pet("Grey", new Image("Grey.png"));
		_smokey = new Pet("Smokey", new Image("Smokey.png"));
		_xander = new Pet("Xander", new Image("Xander.png"));
	}

	private void initGroups () {
		// Kevin, Barack, and Ina
		final ArrayList michelleFriends = new ArrayList();
		michelleFriends.add(_kevin);
		michelleFriends.add(_barack);
		michelleFriends.add(_ina);

		// Michelle and Barack
		_michelleAndBarack = new ArrayList();
		_michelleAndBarack.add(_michelle);
		_michelleAndBarack.add(_barack);

		// Michelle, Joe, Bo, and Malia
		_michelleJoeBoAndMalia = new ArrayList();
		_michelleJoeBoAndMalia.add(_michelle);
		_michelleJoeBoAndMalia.add(_joe);
		_michelleJoeBoAndMalia.add(_bo);
		_michelleJoeBoAndMalia.add(_malia);

		// Malia and Sunny
		final ArrayList maliaAndSunny = new ArrayList();
		maliaAndSunny.add(_malia);
		maliaAndSunny.add(_sunny);

		// Michelle
		final ArrayList michelleList = new ArrayList();
		michelleList.add(_michelle);

		// Bo
		final ArrayList boList = new ArrayList();
		boList.add(_bo);

		// Set people's friend lists
		_michelle.setFriends(michelleFriends);
		_malia.setFriends(boList);
		_sunny.setFriends(boList);
		_barack.setFriends(michelleList);
		_kevin.setFriends(michelleList);
		_ina.setFriends(michelleList);
	
		// Finish configuring pets
		_bo.setFriends(maliaAndSunny);
		_sunny.setFriends(boList);
		final ArrayList boAndSunny = new ArrayList();
		boAndSunny.add(_bo);
		boAndSunny.add(_sunny);
		_michelle.setPets(boAndSunny);
		
		//Matt and Winnie's Groups.
		_matthew.setFriends(new ArrayList<AnimateAccount>(){{
			add(_andrew);
			add(_winnie);
			add(_grey);
			add(_meg);
			add(_kingsley);
			add(_smokey);
			}});
		
		_andrew.setFriends(new ArrayList<AnimateAccount>(){{
			add(_matthew);
			add(_fido);
			add(_grey);
			add(_lewis);
			add(_meg);
			add(_winnie);
			add(_smokey);
			add(_kingsley);
			}});
		
		_winnie.setFriends(new ArrayList<AnimateAccount>(){{
			add(_matthew);
			add(_andrew);
			add(_lewis);
			add(_xander);
			add(_meg);
			add(_grey);
			add(_smokey);
			add(_kingsley);
			}});
		
		_xander.setFriends(new ArrayList<AnimateAccount>(){{
			add(_andrew);
			}});
		
		_kingsley.setFriends(new ArrayList<AnimateAccount>(){{
			add(_andrew);
			add(_matthew);
			add(_winnie);
			add(_smokey);
			add(_meg);
			add(_kingsley);
			add(_grey);
			add(_lewis);
			}});
		
		_lewis.setFriends(new ArrayList<AnimateAccount>(){{
			add(_matthew);
			add(_winnie);
			}});
		
		_meg.setFriends(new ArrayList<AnimateAccount>(){{
			add(_kingsley);
			add(_smokey);
			add(_matthew);
			add(_grey);
			add(_winnie);
			add(_andrew);
			add(_fido);
			}});
		
		_fido.setFriends(new ArrayList<AnimateAccount>(){{
			add(_matthew);
			add(_lewis);
			add(_grey);
			}});
		
		_grey.setFriends(new ArrayList<AnimateAccount>(){{
			add(_matthew);
			add(_xander);
			add(_meg);
			add(_kingsley);
			add(_lewis);
			add(_andrew);
			add(_winnie);
			add(_smokey);
			add(_grey);
			}});
		
		_smokey.setFriends(new ArrayList<AnimateAccount>(){{
			add(_matthew);
			add(_meg);
			add(_andrew);
			add(_lewis);
			add(_smokey);
			add(_kingsley);
			add(_grey);
			add(_winnie);
			}});
		
	}

	private void initPossessions () {
		final Possession boxingBag = new Possession("BoxingBag", new Image("BoxingBag.png"), 20.0f);
		boxingBag.setOwner(_michelle);
		final ArrayList michellePossessions = new ArrayList();
		michellePossessions.add(boxingBag);
		_michelle.setPossessions(michellePossessions);
		
		
		final Possession gameboy = new Possession("GameBoy Advance SP", new Image("GameBoy Advance SP.png"), 100.0f);
		final Possession genesis = new Possession("SEGA Genesis", new Image("SEGA Genesis.png"), 500.0f);
		gameboy.setOwner(_matthew);
		genesis.setOwner(_matthew);
		_matthew.setPossessions(new ArrayList<Possession>(){{
			add(gameboy);
			add(genesis);
		}});
	}

	private void initMoments () {
		// Smiles
		final ArrayList michelleAndBarackSmiles = new ArrayList();
		michelleAndBarackSmiles.add(0.25f);
		michelleAndBarackSmiles.add(0.75f);

		final ArrayList michelleJoeBoAndMaliaSmiles = new ArrayList();
		michelleJoeBoAndMaliaSmiles.add(0.2f);
		michelleJoeBoAndMaliaSmiles.add(0.3f);
		michelleJoeBoAndMaliaSmiles.add(0.4f);
		michelleJoeBoAndMaliaSmiles.add(0.5f);

		// Moments
		_meAndBarack = new Moment("Me & Barack", new Image("MeAndBarack.png"), _michelleAndBarack, michelleAndBarackSmiles);
		final Moment meJoeAndCo = new Moment("Me, Joe & co.", new Image("MeJoeAndCo.png"), _michelleJoeBoAndMalia, michelleJoeBoAndMaliaSmiles);

		final ArrayList michelleMoments = new ArrayList();
		michelleMoments.add(_meAndBarack);
		michelleMoments.add(meJoeAndCo);
		_michelle.setMoments(michelleMoments);

		final ArrayList barackMoments = new ArrayList();
		barackMoments.add(_meAndBarack);
		_barack.setMoments(barackMoments);

		final ArrayList joeMoments = new ArrayList();
		joeMoments.add(meJoeAndCo);
		_joe.setMoments(joeMoments);

		final ArrayList maliaMoments = new ArrayList();
		maliaMoments.add(meJoeAndCo);
		_malia.setMoments(maliaMoments);

		final ArrayList boMoments = new ArrayList();
		boMoments.add(meJoeAndCo);
		_bo.setMoments(boMoments);
		
		final ArrayList<Moment> winnieMoments = new ArrayList<Moment>();
		final Moment vacation = new Moment("Vacation", new Image("Vacation.png"), _winnie.getFriends(), 
				new ArrayList<Float>(){{
					add(0.1f);
					add(0.2f);
					add(0.4f);
					add(0.99f);
					add(0.05f);
					add(0.058f);
					add(0.33f);
					add(0.66f);
				}}); //Corresponds with friends!
		
		final Moment basketball = new Moment("Basketball", new Image("Basketball.png"), _winnie.getFriends(), 
				new ArrayList<Float>(){{
					add(0.2f);
					add(0.9f);
					add(0.02f);
					add(0.06f);
					add(0.189f);
					add(0.7f);
					add(0.4f);
					add(0.1f);
				}}); //Corresponds with friends!
		
		final Moment pizza = new Moment("Pizza", new Image("Pizza.png"), _winnie.getFriends(), 
				new ArrayList<Float>(){{
					add(0.54f);
					add(0.5f);
					add(0.6f);
					add(0.7f);
					add(0.9f);
					add(0.8f);
					add(0.88f);
					add(0.236f);
				}}); //Corresponds with friends!
		
		winnieMoments.add(vacation);
		winnieMoments.add(basketball);
		winnieMoments.add(pizza);
		_winnie.setMoments(winnieMoments);
		
		//Test for null.
		
		final Moment baseball = new Moment("Baseball", new Image("Baseball.png"), new ArrayList<AnimateAccount>(){{
			add(_lewis);
			}}, new ArrayList<Float>(){{
				add(0.59f);
				}});
		
	}

	@Test
	public void testEquals () {
		assertEquals(_michelle, new Person("Michelle", new Image("Michelle.png")));
		assertEquals(_michelle, new Person("Michelle", new Image("Michelle2.png")));  // should still work
		assertNotEquals(_michelle, _barack);
	}

	@Test
	public void testFindBestMoment () {
		assertEquals(_michelle.getOverallHappiestMoment(), _meAndBarack);
	}

	@Test
	public void testGetFriendWithWhomIAmHappiest () {
		assertEquals(_michelle.getFriendWithWhomIAmHappiest(), _barack);
	}
	
	@Test
	public void testGetFriendWithWhomIAmHappiest2 () {
		assertEquals(_winnie.getFriendWithWhomIAmHappiest(), _xander);
	}
	
	@Test (expected = NullPointerException.class)
	public void testGetFriendWithWhomIAmHappiest3 () {
		assertEquals(_matthew.getFriendWithWhomIAmHappiest(), null);
	}

	@Test
	public void testFriendRequest1 () {
		Person person1 = new Person("person1", new Image("person1.png"));
		Person person2 = new Person("person2", new Image("person2.png"));
		Pet pet1 = new Pet("pet1", new Image("pet1.png"));

		FriendRequest friendRequest1 = new FriendRequest(person1, person2);
		// Make sure the code also compiles for making friend requests for people and pets
		FriendRequest friendRequest2 = new FriendRequest(person1, pet1);
	}

	@Test(expected = IllegalArgumentException.class)
	public void testFriendRequest2 () {
		Person person1 = new Person("person1", new Image("person1.png"));
		Person person2 = new Person("person2", new Image("person2.png"));
		Person person3 = new Person("person3", new Image("person3.png"));
		FriendRequest friendRequest = new FriendRequest(person1, person2);
		// This should raise an IllegalArgumentException:
		friendRequest.approve(person3);
	}
	
	@Test
    public void testFriendRequest3 () 
	{
		Pet pet1 = new Pet("pet1", new Image("pet1.png"));
        Pet pet2 = new Pet("pet2", new Image("pet2.png"));
        FriendRequest friendRequest = new FriendRequest(pet1, pet2);
        //Returns an updated list of friends for both pet1 and pet2
        friendRequest.approve(pet1);
    }

    @Test
    public void testFriendRequest4 () 
    {
    	Person person1 = new Person("person1", new Image("person1.png"));
    	Person person2 = new Person("person2", new Image("person2.png"));
    	FriendRequest friendRequest = new FriendRequest(person1, person2);
    	//Returns an updated list of friends for both person1 and person2
    	friendRequest.approve(person1);
    }

    @Test
    public void testFriendRequest5 () 
    {
    	Person person1 = new Person("person1", new Image("person1.png"));
    	Pet pet1 = new Pet("pet1", new Image("pet1.png"));
    	FriendRequest friendRequest = new FriendRequest(person1, pet1);
    	//Returns an updated list of friends for both person1 and pet1
    	friendRequest.approve(person1);
    }
    
    @Test
	public void testgetOverallHappiestMoment() 
    {
    	assertEquals(_winnie.getOverallHappiestMoment(), _winnie.getMoments().get(2)); //_winnie.getMoments().get(2) is pizza!
	}
    
    @Test
	public void testAddFriend () 
    {
    	_matthew.addFriend(_lewis);
	}
    
    @Test 
    public void testIsClique1()
    {    	
    	if(!AnimateAccount.isClique(new ArrayList<AnimateAccount>()))
    	{
    		throw new java.lang.RuntimeException("Not Clique");
    	}
    }
    
    @Test 
    public void testIsClique2()
    {    	
    	if(!AnimateAccount.isClique(new ArrayList<AnimateAccount>(){{
    		add(_matthew.getFriends().get(0));
    	}}))
    	{
    		throw new java.lang.RuntimeException("Not Clique");
    	}
    }
    
    @Test (expected = java.lang.RuntimeException.class)
    public void testIsClique3()
    {    	
    	if(!AnimateAccount.isClique(new ArrayList<AnimateAccount>(){{
    		add(_smokey.getFriends().get(0)); // Matthew
    		add(_smokey.getFriends().get(7)); // Winnie
    		add(_smokey.getFriends().get(3)); // Lewis
    	}}))
    	{
    		throw new java.lang.RuntimeException("Not Clique");
    	}
    }
    
    @Test
    public void testFindMaximumCliqueOfFriends()
    {   
    	if(_matthew.findMaximumCliqueOfFriends() != new ArrayList<AnimateAccount>(){{
    		add(_andrew);
    		add(_winnie);
    		add(_grey);
    		add(_meg);
    		add(_kingsley);
    		add(_smokey);
    	}})
    	{
    		throw new java.lang.RuntimeException("Error");
    	}
    }
}
